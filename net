bodypose_model(
  (model0): Sequential(
    (conv1_1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (relu_conv1_1): ReLU(inplace=True)
    (conv1_2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (relu_conv1_2): ReLU(inplace=True)
    (pool1_stage1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (conv2_1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (relu_conv2_1): ReLU(inplace=True)
    (conv2_2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (relu_conv2_2): ReLU(inplace=True)
    (pool2_stage1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (conv3_1): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (relu_conv3_1): ReLU(inplace=True)
    (conv3_2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (relu_conv3_2): ReLU(inplace=True)
    (conv3_3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (relu_conv3_3): ReLU(inplace=True)
    (conv3_4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (relu_conv3_4): ReLU(inplace=True)
    (pool3_stage1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (conv4_1): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (relu_conv4_1): ReLU(inplace=True)
    (conv4_2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (relu_conv4_2): ReLU(inplace=True)
    (conv4_3_CPM): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (relu_conv4_3_CPM): ReLU(inplace=True)
    (conv4_4_CPM): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (relu_conv4_4_CPM): ReLU(inplace=True)
  )
  (model1_1): Sequential(
    (conv5_1_CPM_L1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (relu_conv5_1_CPM_L1): ReLU(inplace=True)
    (conv5_2_CPM_L1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (relu_conv5_2_CPM_L1): ReLU(inplace=True)
    (conv5_3_CPM_L1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (relu_conv5_3_CPM_L1): ReLU(inplace=True)
    (conv5_4_CPM_L1): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1))
    (relu_conv5_4_CPM_L1): ReLU(inplace=True)
    (conv5_5_CPM_L1): Conv2d(512, 38, kernel_size=(1, 1), stride=(1, 1))
  )
  (model2_1): Sequential(
    (Mconv1_stage2_L1): Conv2d(185, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv1_stage2_L1): ReLU(inplace=True)
    (Mconv2_stage2_L1): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv2_stage2_L1): ReLU(inplace=True)
    (Mconv3_stage2_L1): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv3_stage2_L1): ReLU(inplace=True)
    (Mconv4_stage2_L1): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv4_stage2_L1): ReLU(inplace=True)
    (Mconv5_stage2_L1): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv5_stage2_L1): ReLU(inplace=True)
    (Mconv6_stage2_L1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
    (relu_Mconv6_stage2_L1): ReLU(inplace=True)
    (Mconv7_stage2_L1): Conv2d(128, 38, kernel_size=(1, 1), stride=(1, 1))
  )
  (model3_1): Sequential(
    (Mconv1_stage3_L1): Conv2d(185, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv1_stage3_L1): ReLU(inplace=True)
    (Mconv2_stage3_L1): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv2_stage3_L1): ReLU(inplace=True)
    (Mconv3_stage3_L1): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv3_stage3_L1): ReLU(inplace=True)
    (Mconv4_stage3_L1): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv4_stage3_L1): ReLU(inplace=True)
    (Mconv5_stage3_L1): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv5_stage3_L1): ReLU(inplace=True)
    (Mconv6_stage3_L1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
    (relu_Mconv6_stage3_L1): ReLU(inplace=True)
    (Mconv7_stage3_L1): Conv2d(128, 38, kernel_size=(1, 1), stride=(1, 1))
  )
  (model4_1): Sequential(
    (Mconv1_stage4_L1): Conv2d(185, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv1_stage4_L1): ReLU(inplace=True)
    (Mconv2_stage4_L1): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv2_stage4_L1): ReLU(inplace=True)
    (Mconv3_stage4_L1): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv3_stage4_L1): ReLU(inplace=True)
    (Mconv4_stage4_L1): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv4_stage4_L1): ReLU(inplace=True)
    (Mconv5_stage4_L1): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv5_stage4_L1): ReLU(inplace=True)
    (Mconv6_stage4_L1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
    (relu_Mconv6_stage4_L1): ReLU(inplace=True)
    (Mconv7_stage4_L1): Conv2d(128, 38, kernel_size=(1, 1), stride=(1, 1))
  )
  (model5_1): Sequential(
    (Mconv1_stage5_L1): Conv2d(185, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv1_stage5_L1): ReLU(inplace=True)
    (Mconv2_stage5_L1): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv2_stage5_L1): ReLU(inplace=True)
    (Mconv3_stage5_L1): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv3_stage5_L1): ReLU(inplace=True)
    (Mconv4_stage5_L1): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv4_stage5_L1): ReLU(inplace=True)
    (Mconv5_stage5_L1): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv5_stage5_L1): ReLU(inplace=True)
    (Mconv6_stage5_L1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
    (relu_Mconv6_stage5_L1): ReLU(inplace=True)
    (Mconv7_stage5_L1): Conv2d(128, 38, kernel_size=(1, 1), stride=(1, 1))
  )
  (model6_1): Sequential(
    (Mconv1_stage6_L1): Conv2d(185, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv1_stage6_L1): ReLU(inplace=True)
    (Mconv2_stage6_L1): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv2_stage6_L1): ReLU(inplace=True)
    (Mconv3_stage6_L1): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv3_stage6_L1): ReLU(inplace=True)
    (Mconv4_stage6_L1): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv4_stage6_L1): ReLU(inplace=True)
    (Mconv5_stage6_L1): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv5_stage6_L1): ReLU(inplace=True)
    (Mconv6_stage6_L1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
    (relu_Mconv6_stage6_L1): ReLU(inplace=True)
    (Mconv7_stage6_L1): Conv2d(128, 38, kernel_size=(1, 1), stride=(1, 1))
  )
  (model1_2): Sequential(
    (conv5_1_CPM_L2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (relu_conv5_1_CPM_L2): ReLU(inplace=True)
    (conv5_2_CPM_L2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (relu_conv5_2_CPM_L2): ReLU(inplace=True)
    (conv5_3_CPM_L2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (relu_conv5_3_CPM_L2): ReLU(inplace=True)
    (conv5_4_CPM_L2): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1))
    (relu_conv5_4_CPM_L2): ReLU(inplace=True)
    (conv5_5_CPM_L2): Conv2d(512, 19, kernel_size=(1, 1), stride=(1, 1))
  )
  (model2_2): Sequential(
    (Mconv1_stage2_L2): Conv2d(185, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv1_stage2_L2): ReLU(inplace=True)
    (Mconv2_stage2_L2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv2_stage2_L2): ReLU(inplace=True)
    (Mconv3_stage2_L2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv3_stage2_L2): ReLU(inplace=True)
    (Mconv4_stage2_L2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv4_stage2_L2): ReLU(inplace=True)
    (Mconv5_stage2_L2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv5_stage2_L2): ReLU(inplace=True)
    (Mconv6_stage2_L2): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
    (relu_Mconv6_stage2_L2): ReLU(inplace=True)
    (Mconv7_stage2_L2): Conv2d(128, 19, kernel_size=(1, 1), stride=(1, 1))
  )
  (model3_2): Sequential(
    (Mconv1_stage3_L2): Conv2d(185, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv1_stage3_L2): ReLU(inplace=True)
    (Mconv2_stage3_L2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv2_stage3_L2): ReLU(inplace=True)
    (Mconv3_stage3_L2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv3_stage3_L2): ReLU(inplace=True)
    (Mconv4_stage3_L2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv4_stage3_L2): ReLU(inplace=True)
    (Mconv5_stage3_L2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv5_stage3_L2): ReLU(inplace=True)
    (Mconv6_stage3_L2): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
    (relu_Mconv6_stage3_L2): ReLU(inplace=True)
    (Mconv7_stage3_L2): Conv2d(128, 19, kernel_size=(1, 1), stride=(1, 1))
  )
  (model4_2): Sequential(
    (Mconv1_stage4_L2): Conv2d(185, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv1_stage4_L2): ReLU(inplace=True)
    (Mconv2_stage4_L2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv2_stage4_L2): ReLU(inplace=True)
    (Mconv3_stage4_L2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv3_stage4_L2): ReLU(inplace=True)
    (Mconv4_stage4_L2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv4_stage4_L2): ReLU(inplace=True)
    (Mconv5_stage4_L2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv5_stage4_L2): ReLU(inplace=True)
    (Mconv6_stage4_L2): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
    (relu_Mconv6_stage4_L2): ReLU(inplace=True)
    (Mconv7_stage4_L2): Conv2d(128, 19, kernel_size=(1, 1), stride=(1, 1))
  )
  (model5_2): Sequential(
    (Mconv1_stage5_L2): Conv2d(185, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv1_stage5_L2): ReLU(inplace=True)
    (Mconv2_stage5_L2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv2_stage5_L2): ReLU(inplace=True)
    (Mconv3_stage5_L2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv3_stage5_L2): ReLU(inplace=True)
    (Mconv4_stage5_L2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv4_stage5_L2): ReLU(inplace=True)
    (Mconv5_stage5_L2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv5_stage5_L2): ReLU(inplace=True)
    (Mconv6_stage5_L2): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
    (relu_Mconv6_stage5_L2): ReLU(inplace=True)
    (Mconv7_stage5_L2): Conv2d(128, 19, kernel_size=(1, 1), stride=(1, 1))
  )
  (model6_2): Sequential(
    (Mconv1_stage6_L2): Conv2d(185, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv1_stage6_L2): ReLU(inplace=True)
    (Mconv2_stage6_L2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv2_stage6_L2): ReLU(inplace=True)
    (Mconv3_stage6_L2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv3_stage6_L2): ReLU(inplace=True)
    (Mconv4_stage6_L2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv4_stage6_L2): ReLU(inplace=True)
    (Mconv5_stage6_L2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (relu_Mconv5_stage6_L2): ReLU(inplace=True)
    (Mconv6_stage6_L2): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
    (relu_Mconv6_stage6_L2): ReLU(inplace=True)
    (Mconv7_stage6_L2): Conv2d(128, 19, kernel_size=(1, 1), stride=(1, 1))
    (relu_Mconv7_stage6_L2): ReLU(inplace=True)
  )
)